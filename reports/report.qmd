---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-vcujeffreym2.git


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `Region`, `Income Group` from world_bank_data.wdi_country
where `Region` = 'Aggregates' order by `Short Name`
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as select * from world_bank_data.wdi_country where `Region` != 'Aggregates';
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) as "Number of countries" from wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) as "Number of countries in 2020" from wdi_country
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct `Region` as "Unique Regions" from wdi_country order by `Region`
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Region` as "Region", count(*) as "Number of Countries" from wdi_country group by `Region` order by count(*) desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Long Name` as "Country", `Region` as "Region" from wdi_country
where `Region` = 'North America' order by `Long Name`
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Region` as "Region", `Short Name` as "Country", `Long Name` as "Full Name" from wdi_country
where `Short Name` = 'Qatar' or `Country Code` = 'QAT'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Country Code` as "Code", `Short Name` as "Country", `2-alpha code` as "Abbr", `WB-2 code` as "WB Abbr", `Region` as "Region"
from wdi_country where `2-alpha code` != `WB-2 code` and `2-alpha code` is not null and `WB-2 code` is not null
order by `Short Name`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Income Group` as "Income Category", count(*) as "Number of Countries" from wdi_country
where `Income Group` is not null group by `Income Group` order by count(*) desc
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select `Short Name` as "Country", `Income Group` as "Income Group", `Region` as "Region" from wdi_country
where `Income Group` is null order by `Short Name`
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
update wdi_country set `Income Group` = 'High income' where `Income Group` is null;
""")

```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select `Short Name` as "Country", `Income Group` as "Income Group", `Region` as "Region" from wdi_country
where `Short Name` in ('Andorra', 'Liechtenstein', 'Monaco')
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Region` as "Region", `Income Group` as "Income Group", count(*) as "Number of Countries" from wdi_country
group by `Region`, `Income Group` order by `Region`, `Income Group`
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select `Region` as "Region", sum(case when `Income Group` = 'High income' then 1 else 0 end) as "High income",
sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end) as "Upper middle income",
sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end) as "Lower middle income",
sum(case when `Income Group` = 'Low income' then 1 else 0 end) as "Low income",
sum(case when `Income Group` not in ('High income', 'Upper middle income', 'Lower middle income', 'Low income') or `Income Group` is null then 1 else 0 end) as "Other",
count(*) as "Row Total" from wdi_country group by `Region` order by `Region`
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select count(*) as "Count", `Region` as "Region", 'Low income' as "Income Group" from wdi_country
where `Income Group` = 'Low income' group by `Region` order by count(*) desc limit 1
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select wc.`Country Code` as "Country Code", wc.`Short Name` as "Country Name", wc.`Region` as "Region", wc.`Income Group` as "Income Group"
from wdi_country wc join (select `Region`, `Income Group` from wdi_country where `Country Code` = 'MHL') mi on 
wc.`Region` = mi.`Region` and wc.`Income Group` = mi.`Income Group` order by wc.`Short Name`
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
select ac.`Region` as "Region", ac.`Income Group` as "Income Group" from (select distinct r.`Region`, i.`Income Group` 
from (select distinct `Region` from wdi_country) r cross join (select distinct `Income Group` from wdi_country where `Income Group` is not null) i) ac
left join (select distinct `Region`, `Income Group` from wdi_country where `Income Group` is not null) ec 
on ac.`Region` = ec.`Region` and ac.`Income Group` = ec.`Income Group` where ec.`Region` is null order by ac.`Region`, ac.`Income Group`
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
select main.`Region`, main.`Income Group`, main.country_count, (select count(*) from wdi_country where `Region` = main.`Region`) as region_sum,
(select count(*) from wdi_country where `Income Group` = main.`Income Group`) as income_sum, (select count(*) from wdi_country) as total_sum,
(main.country_count / (select count(*) from wdi_country)) * 100 as percentage_of_total from 
(select `Region`, `Income Group`, count(*) as country_count from wdi_country group by `Region`, `Income Group`) main order by 
main.`Region`, main.`Income Group`
""")

```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
select ric.`Region` as "Region", sum(case when ric.`Income Group` = 'High income' 
      then (ric.country_count / (select count(*) from wdi_country)) * 100 
      else 0 end) as "High income", sum(case when ric.`Income Group` = 'Upper middle income' 
      then (ric.country_count / (select count(*) from wdi_country)) * 100 
      else 0 end) as "Upper middle income", sum(case when ric.`Income Group` = 'Lower middle income' 
      then (ric.country_count / (select count(*) from wdi_country)) * 100 
      else 0 end) as "Lower middle income", sum(case when ric.`Income Group` = 'Low income' 
      then (ric.country_count / (select count(*) from wdi_country)) * 100 
      else 0 end) as "Low income", 
      sum((ric.country_count / (select count(*) from wdi_country)) * 100) as "Row Total" from (select `Region`, `Income Group`, count(*) as country_count 
   from wdi_country group by `Region`, `Income Group`) ric group by ric.`Region` order by ric.`Region`
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
select ic.`Income Group` as "Income Category", ic.country_count as "Number of Countries", (select count(*) from wdi_country) as "Total Countries",
(ic.country_count / (select count(*) from wdi_country)) * 100 as "Percentage" from (select `Income Group`, count(*) as country_count from 
wdi_country group by `Income Group`) ic order by ic.country_count desc
""")

```

# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

This assignment was my introduction to SQL, and I'm pretty comfortable with SELECT, WHERE, and GROUP BY now, though I still have some trouble with complex subqueries and window functions. The percentage calculations in Tasks 19-21 were particularly rough for me. It helped to decompose complex problems into smaller steps (or use CTEs) so I could wrap my head around approaching nested queries.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For complex tasks like 18 and 19-21, I would outline what I wanted the final product to look like first, then approach each complex problem in steps - I would count first, then regional counts, then percentages. For each query when I got stuck, I would break it into pieces. I would debug small pieces of the larger query and ensure I had it fixed (in working order) before they were all combined into one SQL query. In the future, I will spend more time thinking about how the data is structured before diving into a complex query.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

This assignment made me appreciate how powerful SQL can be to analyze data. I liked learning to create summary tables and calculate percentages, which seem to me as very useful tools for actual business analysis. I can see how these tools would be applicable in an area like market research, or in a financial reporting environment. Working on the assignment also taught me about the importance of data quality - discovering and resolving the null income values was a valuable lesson in data cleaning that is applicable to all types of analysis. 


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

